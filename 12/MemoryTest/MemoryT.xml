<tokens>
  <keyword> class </keyword>
  <identifier> Memory </identifier>
  <symbol> { </symbol>
  <keyword> static </keyword>
  <identifier> Array </identifier>
  <identifier> ram </identifier>
  <symbol> ; </symbol>
  <keyword> static </keyword>
  <identifier> Array </identifier>
  <identifier> heap </identifier>
  <symbol> ; </symbol>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> freeList </identifier>
  <symbol> ; </symbol>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> ram </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> heap </identifier>
  <symbol> = </symbol>
  <integerConstant> 2048 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> freeList </identifier>
  <symbol> = </symbol>
  <integerConstant> 2048 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> heap </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> heap </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 14335 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> peek </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> address </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> address </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> poke </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> address </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> value </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> address </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> value </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> alloc </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> size </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> foundAddr </identifier>
  <symbol> , </symbol>
  <identifier> segSize </identifier>
  <symbol> , </symbol>
  <identifier> nxt </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> nxt </identifier>
  <symbol> = </symbol>
  <identifier> freeList </identifier>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> foundAddr </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> segSize </identifier>
  <symbol> = </symbol>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> nxt </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ~ </symbol>
  <symbol> ( </symbol>
  <identifier> segSize </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> size </identifier>
  <symbol> + </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> foundAddr </identifier>
  <symbol> = </symbol>
  <identifier> nxt </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> + </symbol>
  <identifier> segSize </identifier>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> size </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> nxt </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> segSize </identifier>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> size </identifier>
  <symbol> + </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> nxt </identifier>
  <symbol> = </symbol>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> nxt </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> foundAddr </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> size </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> foundAddr </identifier>
  <symbol> + </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> deAlloc </identifier>
  <symbol> ( </symbol>
  <identifier> Array </identifier>
  <identifier> o </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> ram </identifier>
  <symbol> [ </symbol>
  <identifier> o </identifier>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> freeList </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> freeList </identifier>
  <symbol> = </symbol>
  <identifier> o </identifier>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>