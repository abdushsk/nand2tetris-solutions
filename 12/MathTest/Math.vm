function Math.init 0
push constant 16
call Array.new 1
pop static 1
push static 1
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 15
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
return
function Math.bit 3
push constant 15
pop local 0
push argument 0
pop local 1
label L_1
push local 0
push constant 1
neg
gt
not
if-goto L_2
push constant 0
pop local 2
push local 0
push constant 15
eq
not
if-goto L_3
push argument 0
push constant 0
lt
not
if-goto L_5
push constant 1
neg
pop local 2
push local 1
push static 1
push constant 14
add
pop pointer 1
push that 0
add
pop local 1
push local 1
push static 1
push constant 14
add
pop pointer 1
push that 0
add
pop local 1
goto L_6
label L_5
label L_6
goto L_4
label L_3
push local 1
push static 1
push local 0
add
pop pointer 1
push that 0
lt
not
not
if-goto L_7
push local 1
push static 1
push local 0
add
pop pointer 1
push that 0
sub
pop local 1
push constant 1
neg
pop local 2
goto L_8
label L_7
label L_8
label L_4
push local 0
push argument 1
eq
not
if-goto L_9
push local 2
return
goto L_10
label L_9
label L_10
push local 0
push constant 1
sub
pop local 0
goto L_1
label L_2
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label L_11
push local 2
push constant 16
lt
not
if-goto L_12
push argument 1
push local 2
call Math.bit 2
not
if-goto L_13
push local 0
push local 1
add
pop local 0
goto L_14
label L_13
label L_14
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto L_11
label L_12
push local 0
return
function Math.divide 4
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push constant 1
pop local 3
push argument 0
push constant 0
gt
push argument 1
and
push constant 0
lt
push argument 0
push constant 0
lt
push argument 1
and
push constant 0
gt
or
not
if-goto L_15
push constant 1
neg
pop local 3
goto L_16
label L_15
label L_16
push local 1
push local 0
gt
push argument 1
push constant 0
lt
or
not
if-goto L_17
push constant 0
return
goto L_18
label L_17
label L_18
push local 0
push local 1
push local 1
add
call Math.divide 2
pop local 2
push local 0
push constant 2
push local 2
call Math.multiply 2
push local 1
call Math.multiply 2
sub
push local 1
lt
not
if-goto L_19
push local 2
push local 2
add
push local 3
call Math.multiply 2
return
goto L_20
label L_19
label L_20
push constant 2
push local 2
call Math.multiply 2
push constant 1
add
push local 3
call Math.multiply 2
return
function Math.sqrt 4
push constant 16
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label L_21
push local 1
push constant 1
neg
gt
not
if-goto L_22
push constant 2
push local 1
call Math.power 2
pop local 2
push local 0
push local 2
add
push local 0
push local 2
add
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto L_23
push local 0
push local 2
add
pop local 0
goto L_24
label L_23
label L_24
push local 1
push constant 1
sub
pop local 1
goto L_21
label L_22
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto L_25
push argument 0
return
goto L_26
label L_25
label L_26
push argument 1
return
function Math.min 0
push argument 0
push argument 1
gt
not
if-goto L_27
push argument 1
return
goto L_28
label L_27
label L_28
push argument 0
return
function Math.abs 1
push argument 0
pop local 0
push local 0
push constant 0
lt
not
if-goto L_29
push local 0
not
push constant 1
add
pop local 0
goto L_30
label L_29
label L_30
push local 0
return
function Math.power 3
push constant 0
pop local 2
push constant 1
pop local 0
label L_31
push local 2
push argument 1
lt
not
if-goto L_32
push local 0
push argument 0
call Math.multiply 2
pop local 0
push local 2
push constant 1
add
pop local 2
goto L_31
label L_32
push local 0
return