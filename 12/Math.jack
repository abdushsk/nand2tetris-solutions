// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 0;
        return;
    }

    function boolean bit(int x, int i){
        var int currI, currX;
        var boolean found;
        let currI = 15;
        let currX = x;

        while(currI > -1){
            let found = false;
            if (currI = 15 ){
                if (x < 0){
                    let found = true;
                    let currX = currX + powersOfTwo[14];
                    let currX = currX + powersOfTwo[14];
                }
            }else {
                if (~(currX < powersOfTwo[currI])){
                    let currX = currX - powersOfTwo[currI];
                    let found = true;
                }
            }
            if (currI = i){
                return found;
            }
            let currI = currI - 1;
        }
        return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX,i;

        let sum = 0;
        let shiftedX = x;
        let i =0;
        while (i < 16) {
            // code
            if (Math.bit(y,i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; 
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x1, int y1) {
        var int x,y;
        var int q,negate;
        

        let x = Math.abs(x1);
        let y = Math.abs(y1);
        let negate = 1;

        if ((x1 > 0 & y1 < 0) | (x1 < 0 & y1  > 0)){
            let negate = -1; 
        }

        if ((y > x) | (y1 < 0)){
            return 0;
        }
        let q = Math.divide(x,y+y);
        if ((x-((2 * q) * y) ) < y ){
            return  (q + q) * negate;
        }
        return ((2 * q) + 1)*negate;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, twoVal, mainVal;

        let j = Math.divide(16,2) - 1;

        while(j > -1){
            let twoVal = Math.power(2, j);
            let mainVal = Math.multiply((y+twoVal),(y+twoVal)); 
            if (~(mainVal > x) & (mainVal > 0)){
                let y = y + twoVal; 
            }

            let j = j-1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int val;
        let val = x;
        if (val < 0){
            let val = ~val + 1;
        }
        return val;
    }

    function int power(int x, int y) {
        var int val, currX, index;
        
        let index = 0;
        let val = 1;

        while(index < y){
            let val = Math.multiply(val, x);
            let index = index + 1;
        }

        return val;
    }
}
